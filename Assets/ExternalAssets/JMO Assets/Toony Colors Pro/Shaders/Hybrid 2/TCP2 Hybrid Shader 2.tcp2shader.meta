fileFormatVersion: 2
guid: edd7abf643fa4bc4e8561d4c280c97cf
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: 11500000, guid: 7f24c69ecbea31d49bb0044f94b6c8ea, type: 3}
  detectedRenderPipeline: Universal Render Pipeline
  strippedLinesCount: 255
  shaderSourceCode: "// Toony Colors Pro+Mobile 2\n// (c) 2014-2021 Jean Moreno\n\nShader
    \"Toony Colors Pro 2/Hybrid Shader 2\"\n{\n\tProperties\n\t{\n\t\t[Enum(Front,
    2, Back, 1, Both, 0)] _Cull (\"Render Face\", Float) = 2.0\n\t\t[TCP2ToggleNoKeyword]
    _ZWrite (\"Depth Write\", Float) = 1.0\n\t\t[Toggle(_ALPHATEST_ON)] _UseAlphaTest
    (\"Alpha Clipping\", Float) = 0\n\t//# IF_KEYWORD _ALPHATEST_ON\n\t\t_Cutoff
    (\"Alpha Cutoff\", Range(0,1)) = 0.5\n\t//# END_IF\n\n\t//# ========================================================\n\t//#
    Base\n\t\t[MainColor] _BaseColor (\"Color\", Color) = (1,1,1,1)\n\t\t[MainTexture]
    _BaseMap (\"Albedo\", 2D) = \"white\" {}\n\t\t[TCP2ColorNoAlpha] _HColor (\"Highlight
    Color\", Color) = (1,1,1,1)\n\t\t[TCP2ColorNoAlpha] _SColor (\"Shadow Color\",
    Color) = (0.2,0.2,0.2,1)\n\t\t[Toggle(TCP2_SHADOW_LIGHT_COLOR)] _ShadowColorLightAtten
    (\"Main Light affects Shadow Color\", Float) = 1\n\t\t[Toggle(TCP2_SHADOW_TEXTURE)]
    _UseShadowTexture (\"Enable Shadow Albedo Texture\", Float) = 0\n\t//# IF_KEYWORD
    TCP2_SHADOW_TEXTURE\n\t\t[NoScaleOffset] _ShadowBaseMap (\"Shadow Albedo\", 2D)
    = \"gray\" {}\n\t//# END_IF\n\n\t//# ========================================================\n\n\t//#
    Ramp Shading\n\t\t[TCP2MaterialKeywordEnumNoPrefix(Default,_,Crisp,TCP2_RAMP_CRISP,Bands,TCP2_RAMP_BANDS,Bands
    Crisp,TCP2_RAMP_BANDS_CRISP,Texture,TCP2_RAMPTEXT)] _RampType (\"Ramp Type\",
    Float) = 0\n\t//# IF_KEYWORD TCP2_RAMPTEXT\n\t\t[TCP2Gradient] _Ramp (\"Ramp
    Texture (RGB)\", 2D) = \"gray\" {}\n\t\t_RampScale (\"Scale\", Float) = 1.0\n\t\t_RampOffset
    (\"Offset\", Float) = 0.0\n\t//# ELSE\n\t\t[PowerSlider(0.415)] _RampThreshold
    (\"Threshold\", Range(0.01,1)) = 0.75\n\t//# END_IF\n\t//# IF_KEYWORD !TCP2_RAMPTEXT
    && !TCP2_RAMP_CRISP\n\t\t_RampSmoothing (\"Smoothing\", Range(0,1)) = 0.1\n\t//#
    END_IF\n\t//# IF_KEYWORD TCP2_RAMP_BANDS || TCP2_RAMP_BANDS_CRISP\n\t\t[IntRange]
    _RampBands (\"Bands Count\", Range(1,20)) = 4\n\t//# END_IF\n\t//# IF_KEYWORD
    TCP2_RAMP_BANDS\n\t\t_RampBandsSmoothing (\"Bands Smoothing\", Range(0,1)) =
    0.1\n\t//# END_IF\n\n\t//# ========================================================\n\n\t\t[TCP2HeaderToggle(_NORMALMAP)]
    _UseNormalMap (\"Normal Mapping\", Float) = 0\n\t//# IF_KEYWORD _NORMALMAP\n\t\t_BumpMap
    (\"Normal Map\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Scale\", Range(-1,1)) =
    1\n\t//# END_IF\n\t//# ========================================================\n\n\t\t[TCP2HeaderToggle(TCP2_SPECULAR)]
    _UseSpecular (\"Specular\", Float) = 0\n\t//# IF_KEYWORD TCP2_SPECULAR\n\t\t[TCP2MaterialKeywordEnumNoPrefix(GGX,_,Stylized,TCP2_SPECULAR_STYLIZED,Crisp,TCP2_SPECULAR_CRISP)]
    _SpecularType (\"Type\", Float) = 0\n\t\t[TCP2ColorNoAlpha] [HDR] _SpecularColor
    (\"Color\", Color) = (0.75,0.75,0.75,1)\n\t//# IF_KEYWORD TCP2_SPECULAR_STYLIZED
    || TCP2_SPECULAR_CRISP\n\t\t[PowerSlider(5.0)] _SpecularToonSize (\"Size\", Range(0.001,1))
    = 0.25\n\t//# IF_KEYWORD TCP2_SPECULAR_STYLIZED\n\t\t_SpecularToonSmoothness
    (\"Smoothing\", Range(0,1)) = 0.05\n\t//# END_IF\n\t//# ELSE\n\t\t_SpecularRoughness
    (\"Roughness\", Range(0,1)) = 0.5\n\t//# END_IF\n\t//# IF_KEYWORD_DISABLE !TCP2_MOBILE\n\t\t[Enum(Disabled,0,Albedo
    Alpha,1,Custom R,2,Custom G,3,Custom B,4,Custom A,5)] _SpecularMapType (\"Specular
    Map#Specular Map (A)\", Float) = 0\n\t//# END_IF_DISABLE\n\t//# IF_PROPERTY _SpecularMapType
    >= 2 || _UseMobileMode == 1\n\t\t[NoScaleOffset] _SpecGlossMap (\"Specular Texture\",
    2D) = \"white\" {}\n\t//# END_IF\n\t//# END_IF\n\t//# ========================================================\n\n\t\t[TCP2HeaderToggle(_EMISSION)]
    _UseEmission (\"Emission\", Float) = 0\n\t//# IF_KEYWORD _EMISSION\n\t//# IF_KEYWORD_DISABLE
    !TCP2_MOBILE\n\t\t[Enum(No Texture,5,R,0,G,1,B,2,A,3,RGB,4)] _EmissionChannel
    (\"Texture Channel\", Float) = 4\n\t//# END_IF_DISABLE\n\t//# IF_PROPERTY _EmissionChannel
    < 5 || _UseMobileMode == 1\n\t\t_EmissionMap (\"Texture#Texture (A)\", 2D) =
    \"white\" {}\n\t//# END_IF\n\t\t[TCP2ColorNoAlpha(HDR)] _EmissionColor (\"Color\",
    Color) = (1,1,0,1)\n\t//# END_IF\n\t//# ========================================================\n\n\t\t[TCP2HeaderToggle(TCP2_RIM_LIGHTING)]
    _UseRim (\"Rim Lighting\", Float) = 0\n\t//# IF_KEYWORD TCP2_RIM_LIGHTING\n\t\t[TCP2ColorNoAlpha]
    [HDR] _RimColor (\"Color\", Color) = (0.8,0.8,0.8,0.5)\n\t\t_RimMin (\"Min\",
    Range(0,2)) = 0.5\n\t\t_RimMax (\"Max\", Range(0,2)) = 1\n\t\t[Toggle(TCP2_RIM_LIGHTING_LIGHTMASK)]
    _UseRimLightMask (\"Light-based Mask\", Float) = 1\n\t//# END_IF\n\t//# ========================================================\n\n\t\t[TCP2HeaderToggle(TCP2_MATCAP)]
    _UseMatCap (\"MatCap\", Float) = 0\n\t//# IF_KEYWORD TCP2_MATCAP\n\t//# IF_KEYWORD_DISABLE
    !TCP2_MOBILE\n\t\t[Enum(Additive,0,Replace,1)] _MatCapType (\"MatCap Blending\",
    Float) = 0\n\t//# END_IF_DISABLE\n\t\t[NoScaleOffset] _MatCapTex (\"Texture\",
    2D) = \"black\" {}\n\t\t[HDR] [TCP2ColorNoAlpha] _MatCapColor (\"Color\", Color)
    = (1,1,1,1)\n\t\t[Toggle(TCP2_MATCAP_MASK)] _UseMatCapMask (\"Enable Mask\",
    Float) = 0\n\t//# IF_KEYWORD TCP2_MATCAP_MASK\n\t\t[NoScaleOffset] _MatCapMask
    (\"Mask Texture#Mask Texture (A)\", 2D) = \"black\" {}\n\t//# IF_KEYWORD_DISABLE
    !TCP2_MOBILE\n\t\t[Enum(R,0,G,1,B,2,A,3)] _MatCapMaskChannel (\"Texture Channel\",
    Float) = 0\n\t//# END_IF_DISABLE\n\t//# END_IF\n\t//# END_IF\n\t//# ========================================================\n\n\t//#
    Global Illumination\n\t//# \n\n\t//# Indirect Diffuse\n\t\t_IndirectIntensity
    (\"Strength\", Range(0,1)) = 1\n\t//# IF_PROPERTY _IndirectIntensity > 0\n\t\t[TCP2ToggleNoKeyword]
    _SingleIndirectColor (\"Single Indirect Color\", Float) = 0\n\t//# END_IF\n\t//#
    \n\n\t\t[TCP2HeaderToggle(TCP2_REFLECTIONS)] _UseReflections (\"Indirect Specular
    (Environment Reflections)\", Float) = 0\n\t//# IF_KEYWORD TCP2_REFLECTIONS\n\t\t[TCP2ColorNoAlpha]
    _ReflectionColor (\"Color\", Color) = (1,1,1,1)\n\t\t_ReflectionSmoothness (\"Smoothness\",
    Range(0,1)) = 0.5\n\t//# IF_KEYWORD_DISABLE !TCP2_MOBILE\n\t\t[TCP2Enum(Disabled,0,Albedo
    Alpha (Smoothness),1,Custom R (Smoothness),2,Custom G (Smoothness),3,Custom B
    (Smoothness),4,Custom A (Smoothness),5,Albedo Alpha (Mask),6,Custom R (Mask),7,Custom
    G (Mask),8,Custom B (Mask),9,Custom A (Mask),10)]\n\t\t_ReflectionMapType (\"Reflection
    Map\", Float) = 0\n\t//# END_IF_DISABLE\n\t//# IF_PROPERTY (_ReflectionMapType
    != 0 && _ReflectionMapType != 1 && _ReflectionMapType != 6) || _UseMobileMode
    == 1\n\t\t[NoScaleOffset] _ReflectionTex (\"Reflection Texture#Reflection Texture
    (A)\", 2D) = \"white\" {}\n\t//# END_IF\n\t\t[Toggle(TCP2_REFLECTIONS_FRESNEL)]
    _UseFresnelReflections (\"Fresnel Reflections\", Float) = 1\n\t//# IF_KEYWORD
    TCP2_REFLECTIONS_FRESNEL\n\t\t_FresnelMin (\"Fresnel Min\", Range(0,2)) = 0\n\t\t_FresnelMax
    (\"Fresnel Max\", Range(0,2)) = 1.5\n\t//# END_IF\n\t//# END_IF\n\t//# \n\n\t\t[TCP2HeaderToggle(TCP2_OCCLUSION)]
    _UseOcclusion (\"Occlusion\", Float) = 0\n\t//# IF_KEYWORD TCP2_OCCLUSION\n\t\t_OcclusionStrength
    (\"Strength\", Range(0.0, 1.0)) = 1.0\n\t//# IF_PROPERTY _OcclusionChannel >=
    1 || _UseMobileMode == 1\n\t\t[NoScaleOffset] _OcclusionMap (\"Texture#Texture
    (A)\", 2D) = \"white\" {}\n\t//# END_IF\n\t//# IF_KEYWORD_DISABLE !TCP2_MOBILE\n\t\t[Enum(Albedo
    Alpha,0,Custom R,1,Custom G,2,Custom B,3,Custom A,4)] _OcclusionChannel (\"Texture
    Channel\", Float) = 0\n\t//# END_IF_DISABLE\n\t//# END_IF\n\t//# \n\n\t//# ========================================================\n\n\t\t[TCP2HeaderToggle]
    _UseOutline (\"Outline\", Float) = 0\n\t//# IF_PROPERTY _UseOutline > 0\n\t\t[HDR]
    _OutlineColor (\"Color\", Color) = (0,0,0,1)\n\t\t[TCP2MaterialKeywordEnumNoPrefix(Disabled,_,Vertex
    Shader,TCP2_OUTLINE_TEXTURED_VERTEX,Pixel Shader,TCP2_OUTLINE_TEXTURED_FRAGMENT)]
    _OutlineTextureType (\"Texture\", Float) = 0\n\t//# IF_PROPERTY _OutlineTextureType
    >= 1\n\t\t_OutlineTextureLOD (\"Texture LOD\", Range(0,8)) = 5\n\t//# END_IF\n\t//#
    \n\t\t_OutlineWidth (\"Width\", Range(0,10)) = 1\n\t\t[TCP2MaterialKeywordEnumNoPrefix(Disabled,_,Constant,TCP2_OUTLINE_CONST_SIZE,Minimum,TCP2_OUTLINE_MIN_SIZE,Min
    Max,TCP2_OUTLINE_MIN_MAX_SIZE)] _OutlinePixelSizeType (\"Pixel Size\", Float)
    = 0\n\t//# IF_KEYWORD TCP2_OUTLINE_MIN_SIZE || TCP2_OUTLINE_MIN_MAX_SIZE\n\t\t_OutlineMinWidth
    (\"Minimum Width (Pixels)\", Float) = 1\n\t//# END_IF\n\t//# IF_KEYWORD TCP2_OUTLINE_MIN_MAX_SIZE\n\t\t_OutlineMaxWidth
    (\"Maximum Width (Pixels)\", Float) = 1\n\t//# END_IF\n\t//# \n\t\t[TCP2MaterialKeywordEnumNoPrefix(Normal,
    _, Vertex Colors, TCP2_COLORS_AS_NORMALS, Tangents, TCP2_TANGENT_AS_NORMALS,
    UV1, TCP2_UV1_AS_NORMALS, UV2, TCP2_UV2_AS_NORMALS, UV3, TCP2_UV3_AS_NORMALS,
    UV4, TCP2_UV4_AS_NORMALS)]\n\t\t_NormalsSource (\"Outline Normals Source\", Float)
    = 0\n\t//# IF_PROPERTY_DISABLE _NormalsSource > 2\n\t\t[TCP2MaterialKeywordEnumNoPrefix(Full
    XYZ, TCP2_UV_NORMALS_FULL, Compressed XY, _, Compressed ZW, TCP2_UV_NORMALS_ZW)]\n\t\t_NormalsUVType
    (\"UV Data Type\", Float) = 0\n\t//# END_IF_DISABLE\n\t//# \n\n\t//# IF_URP\n\t\t[TCP2MaterialKeywordEnumNoPrefix(Disabled,_,Main
    Directional Light,TCP2_OUTLINE_LIGHTING_MAIN,All Lights,TCP2_OUTLINE_LIGHTING_ALL,Indirect
    Only, TCP2_OUTLINE_LIGHTING_INDIRECT)] _OutlineLightingTypeURP (\"Lighting\",
    Float) = 0\n\t//# ELSE\n\t\t[TCP2MaterialKeywordEnumNoPrefix(Disabled,_,Main
    Directional Light,TCP2_OUTLINE_LIGHTING_MAIN,Indirect Only, TCP2_OUTLINE_LIGHTING_INDIRECT)]
    _OutlineLightingType (\"Lighting\", Float) = 0\n\t//# END_IF\n\t//#\n\t//# IF_KEYWORD
    TCP2_OUTLINE_LIGHTING_MAIN || TCP2_OUTLINE_LIGHTING_ALL || TCP2_OUTLINE_LIGHTING_INDIRECT\n\t//#
    IF_KEYWORD TCP2_OUTLINE_LIGHTING_MAIN || TCP2_OUTLINE_LIGHTING_ALL\n\t\t_DirectIntensityOutline
    (\"Direct Strength\", Range(0,1)) = 1\n\t//# END_IF\n\t\t_IndirectIntensityOutline
    (\"Indirect Strength\", Range(0,1)) = 0\n\t//# END_IF\n\t//# END_IF\n\n\t//#
    ========================================================\n\n\t//# Options\n\t\t[ToggleOff(_RECEIVE_SHADOWS_OFF)]
    _ReceiveShadowsOff (\"Receive Shadows\", Float) = 1\n\n\t\t[HideInInspector]
    _RenderingMode (\"rendering mode\", Float) = 0.0\n\t\t[HideInInspector] _SrcBlend
    (\"blending source\", Float) = 1.0\n\t\t[HideInInspector] _DstBlend (\"blending
    destination\", Float) = 0.0\n\t\t[HideInInspector] _UseMobileMode (\"Mobile mode\",
    Float) = 0\n\t}\n\n\t//================================================================================================================================\n\t//\n\t//
    UNIVERSAL RENDER PIPELINE\n\t//\n\t//================================================================================================================================\n\n\tSubShader\n\t{\n\t\tTags\n\t\t{\n\t\t\t\"RenderPipeline\"
    = \"UniversalPipeline\"\n\t\t\t\"IgnoreProjector\" = \"True\"\n\t\t\t\"RenderType\"
    = \"Opaque\"\n\t\t\t\"Queue\" = \"Geometry\"\n\t\t}\n\n\t\tBlend [_SrcBlend]
    [_DstBlend]\n\t\tZWrite [_ZWrite]\n\t\tCull [_Cull]\n\n\t\tHLSLINCLUDE\n\t\t\t#define
    fixed half\n\t\t\t#define fixed2 half2\n\t\t\t#define fixed3 half3\n\t\t\t#define
    fixed4 half4\n\n\t\t\t#define TCP2_HYBRID_URP\n\t\tENDHLSL\n\n\t\tPass\n\t\t{\n\t\t\tName
    \"Main\"\n\t\t\tTags { \"LightMode\" = \"UniversalForward\" }\n\n\t\t\tHLSLPROGRAM\n\n\t\t\t//
    Required to compile gles 2.0 with standard SRP library\n\t\t\t// All shaders
    must be compiled with HLSLcc and currently only gles is not using HLSLcc by default\n\t\t\t#pragma
    prefer_hlslcc gles\n\t\t\t#pragma exclude_renderers d3d11_9x\n\t\t\t#pragma target
    3.0\n\n\t\t\t#pragma vertex Vertex\n\t\t\t#pragma fragment Fragment\n\n\t\t\t#pragma
    multi_compile_fog\n\t\t\t#pragma multi_compile_instancing\n\n\t\t\t// -------------------------------------\n\t\t\t//
    Material keywords\n\t\t\t#pragma shader_feature_local _ _RECEIVE_SHADOWS_OFF\n\n\t\t\t//
    -------------------------------------\n\t\t\t// Universal Render Pipeline keywords\n\t\t\t#pragma
    multi_compile _ _MAIN_LIGHT_SHADOWS\n\t\t\t#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE\n\t\t\t#pragma
    multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS\n\t\t\t#pragma multi_compile_fragment
    _ _ADDITIONAL_LIGHT_SHADOWS\n\t\t\t#pragma multi_compile_fragment _ _SHADOWS_SOFT\n\t\t\t//
    URP 10:\n\t\t\t#pragma multi_compile _ _SCREEN_SPACE_OCCLUSION\n\t\t\t// URP
    12:\n\t\t\t#pragma multi_compile_fragment _ _DBUFFER_MRT1 _DBUFFER_MRT2 _DBUFFER_MRT3\n\t\t\t#pragma
    multi_compile_fragment _ _LIGHT_LAYERS\n\t\t\t#pragma multi_compile_fragment
    _ _LIGHT_COOKIES\n\n\n\t\t\t// -------------------------------------\n\t\t\t//
    Unity keywords\n\t\t\t#pragma multi_compile_fragment _ LOD_FADE_CROSSFADE\n\n\t\t\t//--------------------------------------\n\t\t\t//
    Toony Colors Pro 2 keywords\n\t\t\t#pragma shader_feature_local TCP2_MOBILE\n\t\t\t#pragma
    shader_feature_local_fragment _ TCP2_RAMPTEXT TCP2_RAMP_CRISP TCP2_RAMP_BANDS
    TCP2_RAMP_BANDS_CRISP\n\t\t\t#pragma shader_feature_local_fragment TCP2_SHADOW_LIGHT_COLOR\n\t\t\t#pragma
    shader_feature_local_fragment TCP2_SHADOW_TEXTURE\n\t\t\t#pragma shader_feature_local_fragment
    TCP2_SPECULAR\n\t\t\t#pragma shader_feature_local_fragment _ TCP2_SPECULAR_STYLIZED
    TCP2_SPECULAR_CRISP\n\t\t\t#pragma shader_feature_local TCP2_RIM_LIGHTING\n\t\t\t#pragma
    shader_feature_local TCP2_RIM_LIGHTING_LIGHTMASK\n\t\t\t#pragma shader_feature_local
    TCP2_REFLECTIONS\n\t\t\t#pragma shader_feature_local TCP2_REFLECTIONS_FRESNEL\n\t\t\t#pragma
    shader_feature_local TCP2_MATCAP\n\t\t\t#pragma shader_feature_local_fragment
    TCP2_MATCAP_MASK\n\t\t\t#pragma shader_feature_local_fragment TCP2_OCCLUSION\n\t\t\t#pragma
    shader_feature_local _NORMALMAP\n\t\t\t#pragma shader_feature_local_fragment
    _ALPHATEST_ON\n\t\t\t#pragma shader_feature_local_fragment _EMISSION\n\n\t\t\t//
    This is using an existing keyword to separate fade/transparent behaviors\n\t\t\t#pragma
    shader_feature_local_fragment _ _ALPHAPREMULTIPLY_ON\n\n\t\t\t#define URP_VERSION
    12\n\t\t\t#include \"TCP2 Hybrid 2 Include.cginc\"\n\n\t\t\tENDHLSL\n\t\t}\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------\n\n\t\tPass\n\t\t{\n\t\t\tName
    \"ShadowCaster\"\n\t\t\tTags { \"LightMode\" = \"ShadowCaster\" }\n\n\t\t\tZWrite
    On\n\t\t\tZTest LEqual\n\t\t\tCull [_Cull]\n\n\t\t\tHLSLPROGRAM\n\t\t\t// Required
    to compile gles 2.0 with standard srp library\n\t\t\t#pragma prefer_hlslcc gles\n\t\t\t#pragma
    exclude_renderers d3d11_9x\n\t\t\t#pragma target 2.0\n\n\t\t\t#pragma vertex
    ShadowPassVertex\n\t\t\t#pragma fragment ShadowPassFragment\n\n\t\t\t#pragma
    multi_compile_instancing\n\t\t\t#pragma multi_compile_vertex _ _CASTING_PUNCTUAL_LIGHT_SHADOW\n\t\t\t#pragma
    multi_compile_fragment _ LOD_FADE_CROSSFADE\n\n\t\t\t#pragma shader_feature_local_fragment
    _ALPHATEST_ON\n\n\t\t\t#define SHADOW_CASTER_PASS\n\t\t\t#define URP_VERSION
    12\n\t\t\t#include \"TCP2 Hybrid 2 Include.cginc\"\n\n\t\t\tfloat3 _LightDirection;\n\t\t\tfloat3
    _LightPosition;\n\n\t\t\tstruct Attributes_Shadow\n\t\t\t{\n\t\t\t\tfloat4 positionOS  
    : POSITION;\n\t\t\t\tfloat3 normalOS     : NORMAL;\n\t\t\t\tfloat2 texcoord    
    : TEXCOORD0;\n\t\t\t\tUNITY_VERTEX_INPUT_INSTANCE_ID\n\t\t\t};\n\n\t\t\tstruct
    Varyings_Shadow\n\t\t\t{\n\t\t\t\tfloat2 uv           : TEXCOORD0;\n\t\t\t\tfloat4
    positionCS   : SV_POSITION;\n\t\t\t};\n\n\t\t\tfloat4 GetShadowPositionHClip(Attributes_Shadow
    input)\n\t\t\t{\n\t\t\t\tfloat3 positionWS = TransformObjectToWorld(input.positionOS.xyz);\n\t\t\t\tfloat3
    normalWS = TransformObjectToWorldNormal(input.normalOS);\n\n\t\t\t\t#if _CASTING_PUNCTUAL_LIGHT_SHADOW\n\t\t\t\t\tfloat3
    lightDirectionWS = normalize(_LightPosition - positionWS);\n\t\t\t\t#else\n\t\t\t\t\tfloat3
    lightDirectionWS = _LightDirection;\n\t\t\t\t#endif\n\n\t\t\t\tfloat4 positionCS
    = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, lightDirectionWS));\n\n\t\t\t\t#if
    UNITY_REVERSED_Z\n\t\t\t\t\tpositionCS.z = min(positionCS.z, UNITY_NEAR_CLIP_VALUE);\n\t\t\t\t#else\n\t\t\t\t\tpositionCS.z
    = max(positionCS.z, UNITY_NEAR_CLIP_VALUE);\n\t\t\t\t#endif\n\n\t\t\t\treturn
    positionCS;\n\t\t\t}\n\n\t\t\tVaryings_Shadow ShadowPassVertex(Attributes_Shadow
    input)\n\t\t\t{\n\t\t\t\tVaryings_Shadow output = (Varyings_Shadow)0;\n\t\t\t\tUNITY_SETUP_INSTANCE_ID(input);\n\n\t\t\t\toutput.uv
    = TRANSFORM_TEX(input.texcoord, _BaseMap);\n\t\t\t\toutput.positionCS = GetShadowPositionHClip(input);\n\t\t\t\treturn
    output;\n\t\t\t}\n\n\t\t\thalf4 ShadowPassFragment(Varyings_Shadow input) : SV_TARGET\n\t\t\t{\n\t\t\t\t#if
    defined(_ALPHATEST_ON)\n\t\t\t\t\thalf4 albedo = tex2D(_BaseMap, input.uv.xy).rgba;\n\t\t\t\t\talbedo.rgb
    *= _BaseColor.rgb;\n\t\t\t\t\thalf alpha = albedo.a * _BaseColor.a;\n\t\t\t\t\tclip(alpha
    - _Cutoff);\n\t\t\t\t#endif\n\n\t\t\t\t#if defined(LOD_FADE_CROSSFADE)\n\t\t\t\t\tconst
    float dither = Dither4x4(input.positionCS.xy);\n\t\t\t\t\tconst float ditherThreshold
    = unity_LODFade.x - CopySign(dither, unity_LODFade.x);\n\t\t\t\t\tclip(ditherThreshold);\n\t\t\t\t#endif\n\n\t\t\t\treturn
    0;\n\t\t\t}\n\n\t\t\tENDHLSL\n\t\t}\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------\n\n\t\tPass\n\t\t{\n\t\t\tName
    \"DepthOnly\"\n\t\t\tTags { \"LightMode\" = \"DepthOnly\" }\n\n\t\t\tZWrite On\n\t\t\tColorMask
    0\n\t\t\tCull [_Cull]\n\n\t\t\tHLSLPROGRAM\n\n\t\t\t// Required to compile gles
    2.0 with standard srp library\n\t\t\t#pragma prefer_hlslcc gles\n\t\t\t#pragma
    exclude_renderers d3d11_9x\n\t\t\t#pragma target 2.0\n\n\t\t\t#pragma vertex
    DepthOnlyVertex\n\t\t\t#pragma fragment DepthOnlyFragment\n\n\t\t\t#pragma multi_compile_instancing\n\t\t\t#pragma
    multi_compile_fragment _ LOD_FADE_CROSSFADE\n\n\t\t\t#pragma shader_feature_local_fragment
    _ALPHATEST_ON\n\n\t\t\t#define URP_VERSION 12\n\t\t\t#include \"TCP2 Hybrid 2
    Include.cginc\"\n\n\t\t\tstruct Attributes_Depth\n\t\t\t{\n\t\t\t\tfloat4 position    
    : POSITION;\n\t\t\t\tfloat2 texcoord     : TEXCOORD0;\n\t\t\t\tUNITY_VERTEX_INPUT_INSTANCE_ID\n\t\t\t};\n\n\t\t\tstruct
    Varyings_Depth\n\t\t\t{\n\t\t\t\tfloat2 uv           : TEXCOORD0;\n\t\t\t\tfloat4
    positionCS   : SV_POSITION;\n\t\t\t\tUNITY_VERTEX_INPUT_INSTANCE_ID\n\t\t\t\tUNITY_VERTEX_OUTPUT_STEREO\n\t\t\t};\n\n\t\t\tVaryings_Depth
    DepthOnlyVertex(Attributes_Depth input)\n\t\t\t{\n\t\t\t\tVaryings_Depth output
    = (Varyings_Depth)0;\n\t\t\t\tUNITY_SETUP_INSTANCE_ID(input);\n\t\t\t\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);\n\n\t\t\t\toutput.uv
    = TRANSFORM_TEX(input.texcoord, _BaseMap);\n\t\t\t\toutput.positionCS = TransformObjectToHClip(input.position.xyz);\n\t\t\t\treturn
    output;\n\t\t\t}\n\n\t\t\thalf4 DepthOnlyFragment(Varyings_Depth input) : SV_TARGET\n\t\t\t{\n\t\t\t\tUNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);\n\n\t\t\t\t#if
    defined(LOD_FADE_CROSSFADE)\n\t\t\t\t\tconst float dither = Dither4x4(input.positionCS.xy);\n\t\t\t\t\tconst
    float ditherThreshold = unity_LODFade.x - CopySign(dither, unity_LODFade.x);\n\t\t\t\t\tclip(ditherThreshold);\n\t\t\t\t#endif\n\n\t\t\t\thalf4
    albedo = tex2D(_BaseMap, input.uv.xy).rgba;\n\t\t\t\talbedo.rgb *= _BaseColor.rgb;\n\t\t\t\thalf
    alpha = albedo.a * _BaseColor.a;\n\n\t\t\t\t#if defined(_ALPHATEST_ON)\n\t\t\t\t\tclip(alpha
    - _Cutoff);\n\t\t\t\t#endif\n\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tENDHLSL\n\t\t}\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------\n\n\t\tPass\n\t\t{\n\t\t\tName
    \"DepthNormals\"\n\t\t\tTags { \"LightMode\" = \"DepthNormals\" }\n\n\t\t\tZWrite
    On\n\t\t\tCull [_Cull]\n\n\t\t\tHLSLPROGRAM\n\n\t\t\t// Required to compile gles
    2.0 with stanard srp library\n\t\t\t#pragma prefer_hlslcc gles\n\t\t\t#pragma
    exclude_renderers d3d11_9x\n\t\t\t#pragma target 2.0\n\n\t\t\t#pragma vertex
    DepthNormalsVertex\n\t\t\t#pragma fragment DepthNormalsFragment\n\n\t\t\t#pragma
    multi_compile_instancing\n\t\t\t#pragma multi_compile_fragment _ LOD_FADE_CROSSFADE\n\n\t\t\t#pragma
    shader_feature_local_fragment _ALPHATEST_ON\n\n\t\t\t#define DEPTH_NORMALS_PASS\n\t\t\t#define
    URP_VERSION 12\n\t\t\t#include \"TCP2 Hybrid 2 Include.cginc\"\n\n\t\t\tstruct
    Attributes_Depth\n\t\t\t{\n\t\t\t\tfloat4 position     : POSITION;\n\t\t\t\tfloat2
    texcoord     : TEXCOORD0;\n\t\t\t\tfloat3 normal       : NORMAL;\n\t\t\t\tUNITY_VERTEX_INPUT_INSTANCE_ID\n\t\t\t};\n\n\t\t\tstruct
    Varyings_Depth\n\t\t\t{\n\t\t\t\tfloat2 uv           : TEXCOORD0;\n\t\t\t\tfloat4
    positionCS   : SV_POSITION;\n\t\t\t\tfloat3 normalWS     : TEXCOORD1;\n\t\t\t\tUNITY_VERTEX_INPUT_INSTANCE_ID\n\t\t\t\tUNITY_VERTEX_OUTPUT_STEREO\n\t\t\t};\n\n\t\t\tVaryings_Depth
    DepthNormalsVertex(Attributes_Depth input)\n\t\t\t{\n\t\t\t\tVaryings_Depth output
    = (Varyings_Depth)0;\n\t\t\t\tUNITY_SETUP_INSTANCE_ID(input);\n\t\t\t\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);\n\n\t\t\t\toutput.uv
    = TRANSFORM_TEX(input.texcoord, _BaseMap);\n\t\t\t\toutput.positionCS = TransformObjectToHClip(input.position.xyz);\n\t\t\t\tfloat3
    normalWS = TransformObjectToWorldNormal(input.normal);\n\t\t\t\toutput.normalWS
    = NormalizeNormalPerVertex(normalWS);\n\t\t\t\treturn output;\n\t\t\t}\n\n\t\t\thalf4
    DepthNormalsFragment(\n\t\t\t\tVaryings_Depth input\n#ifdef _WRITE_RENDERING_LAYERS\n\t\t\t\t,
    out float4 outRenderingLayers : SV_Target1\n#endif\n\t\t\t\t) : SV_TARGET\n\t\t\t{\n\t\t\t\tUNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);\n\n\t\t\t\t#if
    defined(LOD_FADE_CROSSFADE)\n\t\t\t\t\tconst float dither = Dither4x4(input.positionCS.xy);\n\t\t\t\t\tconst
    float ditherThreshold = unity_LODFade.x - CopySign(dither, unity_LODFade.x);\n\t\t\t\t\tclip(ditherThreshold);\n\t\t\t\t#endif\n\n\t\t\t\thalf4
    albedo = tex2D(_BaseMap, input.uv.xy).rgba;\n\t\t\t\thalf alpha = albedo.a *
    _BaseColor.a;\n\n\t\t\t\t#if defined(_ALPHATEST_ON)\n\t\t\t\t\tclip(alpha - _Cutoff);\n\t\t\t\t#endif\n\n\t           
    #if URP_VERSION >= 14 && defined(_WRITE_RENDERING_LAYERS)\n\t\t            uint
    meshRenderingLayers = GetMeshRenderingLayer();\n\t\t            outRenderingLayers
    = float4(EncodeMeshRenderingLayer(meshRenderingLayers), 0, 0, 0);\n\t           
    #endif\n\n\t\t\t\treturn float4(PackNormalOctRectEncode(TransformWorldToViewDir(input.normalWS,
    true)), 0.0, 0.0);\n\t\t\t}\n\n\t\t\tENDHLSL\n\t\t}\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------\n\t\t\n\t\tPass\n\t\t{\n\t\t\tName
    \"Meta\"\n\t\t\tTags { \"LightMode\"=\"Meta\" }\n\t\t\t\n\t\t\tCull Off\n\n\t\t\tHLSLPROGRAM\n\t\t\t//
    Required to compile gles 2.0 with standard SRP library\n\t\t\t// All shaders
    must be compiled with HLSLcc and currently only gles is not using HLSLcc by default\n\t\t\t#pragma
    prefer_hlslcc gles\n\t\t\t#pragma exclude_renderers d3d11_9x\n\t\t\t#pragma target
    3.0\n\n\t\t\t#pragma vertex Vertex\n\t\t\t#pragma fragment Fragment\n\n\t\t\t//--------------------------------------\n\t\t\t//
    Toony Colors Pro 2 keywords\n\t\t\t#pragma shader_feature_local TCP2_MOBILE\n\t\t\t#pragma
    shader_feature_local_fragment TCP2_SPECULAR\n\t\t\t#pragma shader_feature_local_fragment
    _ALPHATEST_ON\n\t\t\t#pragma shader_feature_local_fragment _EMISSION\n\n\t\t\t#undef
    UNITY_SHOULD_SAMPLE_SH\n\t\t\t#define UNITY_SHOULD_SAMPLE_SH 0\n\n\t\t\t#ifndef
    UNITY_PASS_META\n\t\t\t\t#define UNITY_PASS_META\n\t\t\t#endif\n\n\t\t\t#include
    \"Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl\"\n\t\t\t#include
    \"Packages/com.unity.render-pipelines.universal/ShaderLibrary/MetaInput.hlsl\"\n\t\t\t#define
    URP_VERSION 12\n\t\t\t#include \"TCP2 Hybrid 2 Include.cginc\"\n\n\t\t\tENDHLSL\n\t\t}\n\t\t\n\t\t//--------------------------------------------------------------------------------------------------------------------------------\n\t\t\n\t\t//
    Depth prepass\n\t\t// UsePass \"Universal Render Pipeline/Lit/DepthOnly\"\n\t}\n\n\n\tFallBack
    \"Hidden/InternalErrorShader\"\n\tCustomEditor \"ToonyColorsPro.ShaderGenerator.MaterialInspector_Hybrid\"\n}\n"
  shaderName: Toony Colors Pro 2/Hybrid Shader 2
  shaderErrors: []
  variantCount: 49162
  variantCountUsed: 29
  availableOptions:
  - label:
      text: Emission
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: MatCap
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Normal Map
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Occlusion
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Ramp Style Variants
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Reflections
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Rim Lighting
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Shadow Albedo Texture
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Specular
      image: {instanceID: 0}
      tooltip: 
    category: 1
    isOffOption: 0
  - label:
      text: Additional Lights (URP)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Additional Lights Shadows
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Decals (URP 12+)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Fog
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Forward+ Support (URP 14+)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: GPU Instancing
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: LOD Crossfading
      image: {instanceID: 0}
      tooltip: Toggle LOD Crossfading support with dithering
    category: 0
    isOffOption: 0
  - label:
      text: Light Cookies (URP 12+)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Light Layers (URP 12+)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Lightmap
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 1
  - label:
      text: Main Light Shadows (URP)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Rendering Debugger Support (URP 14+)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Rendering Layers (URP 14+)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: SSAO (URP 10+)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  - label:
      text: Soft Shadows (URP)
      image: {instanceID: 0}
      tooltip: 
    category: 0
    isOffOption: 0
  toggledOptions:
  - Emission
  - MatCap
  - Normal Map
  - Occlusion
  - Reflections
  - Shadow Albedo Texture
  - Soft Shadows (URP)
